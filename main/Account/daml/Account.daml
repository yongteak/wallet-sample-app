-- Copyright (c) 2021 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- 이 모듈은 자산을 보유하기 위한 계정을 구현합니다.
-- AssetHoldingAccount템플릿은 한 가지 유형의 자산만 보유할 수 있습니다. 각 자산 유형에 대해 별도의 AssetHoldingAccount(자산 보유 계정)계약을 을 생성해야 합니다.
-- 계정 생성은 AssetHoldingAccount(자산 보유 계정) 템플릿을 통해 구현된 제안(propose)/수락(accept) 패턴을 따르며, Invite_New_Asset_Holder 선택(choice)과 함께 AssetHoldingAccountProposal(자산 보유 계정 제안) 컨트랙트를 생성합니다. 
-- AssetHoldingAccountProposal_Accept(자산 보유 계정 제안 수락)을 선택(choice)하면 제안 수신 당사자를 계정 소유자로 하는 AssetHoldingAccount(자산 보유 계정) 템플릿이 생성됩니다.
module Account where

import DA.Action
import DA.List as L
import DA.Set as Set
import DA.Foldable (forA_)
import DA.Optional (whenSome)
import Asset

-- 이 함수는 입력 자산 목록을 병합(merged)한 다음 분할(split)할 수 있는지 여부를 검증하여 AssetHoldingAccount(자산 보유 계좌) 템플릿의 
-- Merge_Split, Create_Transfers 및 Create_Trade 선택 항목(choices)과 Trade(트레이딩) 템플릿의 Trade_Settle 선택(choice) 항목에서 사용할 수 있는지 확인합니다.
-- 자산을 병합(merged)할 수 있고 총 금액이 출력금액(outputAmounts)으로 분할(split)하기에 충분한 경우 함수는 입력 자산의 총 금액을 반환합니다. 그렇지 않으면 작업이 실패합니다.
-- [ContractId Asset]: 함수의 첫 번째 인수로, Asset 계약의 ContractId의 리스트를 나타냅니다. 이는 검증하려는 자산의 ContractId 목록을 나타낼 것입니다.
-- ContractId AssetHoldingAccount: 함수의 두 번째 인수로, AssetHoldingAccount 계약의 ContractId를 나타냅니다. 이는 검증 작업에 사용될 특정 계정을 나타낼 것입니다.
-- Decimal: 함수의 세 번째 인수로, 소수점이 있는 숫자를 나타냅니다. 이는 아마도 검증하려는 특정 금액 또는 값일 것입니다.
-- Update Decimal: 함수의 반환 타입입니다. Update는 Daml에서 상태 변경이 발생하는 작업을 나타내는 모나드입니다. 이 함수는 Update 컨텍스트에서 실행되며, Decimal 값을 반환합니다.
-- validateTxInputs 함수는 주어진 자산의 ContractId 목록, 특정 계정, 그리고 특정 금액을 기반으로 검증 작업을 수행하고, 결과로 Decimal 값을 Update 컨텍스트에서 반환합니다.
validateTxInputs: [ContractId Asset] -> ContractId AssetHoldingAccount -> Decimal -> Update Decimal
validateTxInputs assetCids accountCid outputAmount = do
  assertMsg "Duplicate Asset ContractIds not allowed in the input list" $
    unique assetCids
  account <- fetch accountCid
  totAssetAmount <- sum <$> forA assetCids \assetCid -> do
    asset <- fetch assetCid
    assertMsg "자산과 계정 간 자산 유형 불일치" $
      asset.assetType == account.assetType
    assertMsg "자산과 계정 간 소유자 불일치" $
      asset.owner == account.owner
    return asset.amount
  assertMsg "Insufficient funds passed to create all output assets" $
    totAssetAmount >= outputAmount
  return totAssetAmount

-- AssetHoldingAccount(자산 보유 계정)템플릿은 자산 계약을 보유할 수 있는 계정을 나타냅니다.  
-- 계정에 보유된 자산은 자산 유형과 소유자가 자산과 AssetHoldingAccount(자산 보유 계정)템플릿간에 일치하는 활성 계약 세트(Active Contract Set)의 모든 자산 계약입니다.
-- 계정에 보유한 자산 금액의 합계(Asset.amount)가 계정 잔액을 나타냅니다.
template AssetHoldingAccount with
    -- 발행자, 심볼, 대체 가능(fungible) 및 참조 자산의 조합에 따라 계좌에 보유할 수 있는 자산 유형이 정의됩니다.
    -- AssetType타입은 Asset.daml 참고
    assetType : AssetType
    -- 계정 소유자
    owner : Party
    -- 발행자(issuer)가 소유자(owner's account)의 계정에서 자산(Asset)을 생성할 수 있는지 여부를 지정합니다.
    -- 자산 계약(Asset contract)은 발행자(issuer)와 소유자(owner)가 모두 서명하기 때문에 발행자(issuer)가 "자산 생성" 명령( "create Asset" command)을 실행하여 소유자(owner)/=발행자(issuer) 조건의 의한 일방적으로 자산을 생성할 수 없습니다. 
    -- 에어드랍 가능(airdroppable)옵션을 사용하면 발행자(issuer)는 소유자(owner)의 AssetHoldingAccount 컨트랙트에서 에어드롭 선택(choice)권을 행사(exercising)하여 소유자(owner)의 계정에서 자산을 생성할 수 있습니다.
    airdroppable : Bool
    -- 발행자(only the issuer)만 당사자를 초대(invite parties)하여 AssetHoldingAccount(자산 보유 계정)을 만들 수 있는지 또는 발행자(issuer)와 소유자(owner) 모두 이 권한(privilege)을 가질 수 있는지 지정합니다.
    -- resharable : 재공유 가능여부
    resharable : Bool 
  where
    signatory assetType.issuer, owner
    key (assetType, owner) : (AssetType, Party)
    maintainer key._1.issuer

    -- 이 자산 유형(asset type)에 대한 AssetHoldingAccount(자산 보유 계정)을 만들도록 파티에 초대를 보냅니다.
    nonconsuming choice Invite_New_Asset_Holder : ContractId AssetHoldingAccountProposal
      with
        -- 수신자
        recipient : Party
      controller if resharable then owner else assetType.issuer
      do
        create AssetHoldingAccountProposal with
          account = this
          recipient

    -- 발행자(issuer)가 자산을 소유자(owner)의 계좌로 입금(aidrop)할 때 선택(choice)할 수 있는 옵션입니다.
    -- 발행자(issuer)가 자신의 계정으로 자산을 발행(mint asset into own account)하는 데에도 이 옵션을 사용(choice)할 수 있습니다.  
    nonconsuming choice Airdrop : ContractId Asset
      with
        amount : Decimal
      controller assetType.issuer 
      do
        assertMsg "에어드랍을 생성할 수 없습니다. 대상 계정이 에어드랍을 허용하지 않습니다.(target account does not accept airdrops)" $
          airdroppable || assetType.issuer==owner
        assertMsg "에어드랍을 생성할 수 없습니다. 대체 불가능한 자산(fungible)의 금액은 1.0이어야 합니다." $ 
          assetType.fungible || amount==1.0
        create Asset with
          assetType
          owner
          amount
          observers = Set.empty

    -- 이 선택(choice)은 계정의 입력 자산 집합을 통합(consolidates)하고 총 금액에서 원하는 입력 금액과 남은 금액의 자산을 하나 더 추가하여 새 자산 계약 집합(new set of Asset contracts)을 만듭니다.
    -- 계정의 자산 목록에서 원하는 액면가(desired denomination, 화폐단위)로 자산 계약을 생성하는 것이 목적입니다.
    nonconsuming choice Merge_Split : [ContractId Asset]
      with
        -- 통합할 자산 목록 (The list of assets to consolidate)
        assetCids : [ContractId Asset]
        -- 원하는 출력 자산의 양 (The desired amounts of the output assets)
        outputAmounts : [Decimal]
      controller owner
      do
        assertMsg "대체 불가능한 자산(NFT)은 병합할 수 없습니다." $
          assetType.fungible
        -- validateTxInputs: [ContractId Asset] -> ContractId AssetHoldingAccount -> Decimal -> Update Decimal
        -- self: self는 일반적으로 Daml에서 현재 계약의 ContractId를 나타내는 키워드입니다. 이 경우, validateTxInputs 함수는 현재 계약의 정보를 사용하여 검증을 수행할 수 있습니다.
        -- $: Daml 및 Haskell에서 사용되는 함수 응용 연산자입니다. 이 연산자는 왼쪽의 함수에 오른쪽의 값을 인수로 전달합니다. 이 연산자를 사용하면 괄호를 사용하지 않고 함수를 깔끔하게 호출할 수 있습니다.
        totAssetAmount <- validateTxInputs assetCids self $ sum outputAmounts
        -- totAssetAmount합산후 assetCids를 모두 archive처리
        forA_ assetCids archive 
        -- createOutputAssets 함수 선언
        -- 주어진 양의 자산을 생성하고, 이미 생성된 자산 목록에 추가하는 역할을 합니다. 만약 주어진 양이 0 이하라면 에러 메시지를 표시합니다.
        let 
          createOutputAssets assetsList amt = do
            assertMsg "각 출력 자산 금액은 양수여야 합니다." $
              amt > 0.0
            a <- create Asset with
              assetType
              owner
              amount = amt
              observers = Set.empty
            return $ a :: assetsList
        outputAssetCids <- foldlA createOutputAssets [] outputAmounts
        if (totAssetAmount > sum outputAmounts)
        then do 
          a <- create Asset with
            assetType
            owner
            amount = (totAssetAmount - sum outputAmounts)
            observers = Set.empty
          return $ a :: outputAssetCids
        else
          return outputAssetCids

    -- 이 선택(choice)의 목적(purpose)은 클라이언트 애플리케이션이 계좌에 보유한 여러 자산 계약(multiple Asset contracts held in the account)을 사용하여 일련의 전송 제안을 생성할 수 있도록 하기 위함입니다. 
    -- 클라이언트 애플리케이션은 계정에 보유한 자산과 AssetHoldingAccount(자산 보유 계정 간)에 assetType(자산 유형)과 소유자가 일치하는 모든 활성 자산 계약을 쿼리(can query for all active Asset contracts)할 수 있습니다.
    -- 그런 다음 자산 계약 ID 목록(contract Ids)을 이 선택(choice) 항목으로 전달하여 
    -- 모든 이체 총액이 선택(choice) 항목으로 전달된 자산 총액보다 적으면 이체 제안(transfer proposals)을 생성할 수 있습니다.
    nonconsuming choice Create_Transfers : ()
      with
        assetCids : [ContractId Asset]
        transfers : [(Decimal, Party)]
      controller owner
      do
        let (txAmounts, txRecipients) = unzip transfers
        assertMsg "대체 불가능한 자산은 한 번에 하나씩 양도해야 하며 대체 불가능한 자산 수량은 1.0이어야 합니다." $
          assetType.fungible || (L.length assetCids==1 && L.length transfers==1 && L.head txAmounts==1.0)
        totAssetAmount <- validateTxInputs assetCids self $ sum txAmounts
        forA_ assetCids archive
        -- transfers갯수만큼 계약서 생성
        forA_ transfers (\tx -> do
          assertMsg "각 이체 금액은 양수여야 합니다." $
            tx._1 > 0.0
          create AssetTransfer with
            asset = Asset with
              assetType
              owner
              amount = tx._1
              observers = Set.empty
            recipient = tx._2
          )
        when (totAssetAmount > sum txAmounts) do 
          create Asset with
            assetType
            owner
            amount = (totAssetAmount - sum txAmounts)
            observers = Set.empty
          return ()
          
    -- 이 선택(choice)의 목적(purpose)은 송금을 수락하는 데 필요한 발급자의 권한(issuer's authority required)을 얻기 위한 것입니다.
    -- 이 구조는 자산에 해당하는 AssetHoldingAccount(자산보유계좌)가 없는 당사자에게 전송할 수 없도록 합니다.
    nonconsuming choice Deposit_Transfer_Into_Account : ContractId Asset
      with
        transferCid : ContractId AssetTransfer
      controller owner 
      do
        transfer <- fetch transferCid
        assertMsg "이체 자산과 계정 간의 자산 유형 불일치 (asset.assetType == assetType)" $
          transfer.asset.assetType == assetType
        assertMsg "계정 소유자와 이체 받는 사람 간의 불일치 (recipient == owner)" $
          transfer.recipient == owner
        exercise transferCid Accept_Transfer

    -- 이 옵션을 선택(choice)하면 계좌에 보유한 자산 목록을 사용하여 거래를 제안(allows to propose)할 수 있습니다.
    -- AtomicSwap핵심 기능
    nonconsuming choice Create_Trade : ContractId Trade
      with
        -- 제공된 에셋(offered asset from)을 생성할 에셋 목록입니다.
        assetCids : [ContractId Asset]
        -- 거래 제안에서 제공되는 자산 금액(amount)
        offeredAssetAmount : Decimal
        -- 제공된 자산을 거래(trade)하거나 교환(swap)할 자산입니다.
        requestedAsset : Asset
      controller owner
      do
        assertMsg "대체 불가능한 자산은 한 번에 하나씩 거래해야 합니다." $
          assetType.fungible || L.length assetCids==1
        totAssetAmount <- validateTxInputs assetCids self offeredAssetAmount
        forA_ assetCids archive
        offeredAssetCid <- create AssetInSwap with
          asset = Asset with
            assetType
            owner
            amount = offeredAssetAmount
            observers = Set.empty
          receiver = requestedAsset.owner
        -- [2023-08-10 10:57:49]
        -- 왜 만드는거지? 반대 조건이면 asset에서 처리해야하지 않나?
        when (totAssetAmount > offeredAssetAmount) do
          create Asset with
            assetType
            owner
            amount = (totAssetAmount - offeredAssetAmount)
            observers = Set.empty
          return ()
        requestedAssetTxPreApprovalCid <- 
          exerciseByKey @AssetHoldingAccount (requestedAsset.assetType, owner) Preapprove_Transfer_In with 
            asset = requestedAsset
        create Trade with
          proposer = owner
          receiver = requestedAsset.owner
          offeredAssetCid
          requestedAssetTxPreApprovalCid

    -- 이 옵션을 선택(choice)하면 수신 이체에 대한 사전 승인(pre-approval)이 생성되어 이체 발신자(transfer originator)에게 이체 자산을 이 계좌에 입금할 수 있는 권한이 부여됩니다.
    nonconsuming choice Preapprove_Transfer_In : ContractId TransferPreApproval
      with
        asset : Asset
      controller owner
      do
        create TransferPreApproval with
          asset
          newOwner = owner

    -- 계정 폐쇄를 위한 제안/수락 패턴을 통해 발행자가 계좌에 보유한 자산을 소각할 수 있습니다.
    -- AssetHoldingAccountCloseProposal(자산 보유 계정 폐쇄 제안)을 수락할 때, 발행자(issuer)는 폐쇄되는 자산 보유 계정에 해당하는 모든 자산 컨트랙트를 보관해야 합니다. (issuer should archive all Asset contracts)
    -- 이는 클라이언트 측에서 구현해야 하는데(This must be imeplemented client side),
    -- Daml은 ContractId 또는 키로만 원장의 활성 컨트랙트 세트를 쿼리할 수 있으므로 계정의 자산 목록은 클라이언트 측에서만 생성할 수 있기 때문입니다.
    -- [2023-08-10 12:22:41] archive되는 항목은 DAML에서 조회할수 없으므로 해당 내용들을 DB에 저장/관리하라는 의미
    nonconsuming choice Close_Account : ContractId AssetHoldingAccountCloseProposal
      controller owner
      do
        create AssetHoldingAccountCloseProposal with 
          account = this

template AssetHoldingAccountProposal with
    account : AssetHoldingAccount
    recipient : Party
  where
    signatory account.assetType.issuer
    observer recipient

    choice AssetHoldingAccountProposal_Accept : ContractId AssetHoldingAccount
      controller recipient 
      do
        create account with
          owner = recipient

    choice AssetHoldingAccountProposal_Reject : ()
      controller recipient 
      do
        return ()

template AssetHoldingAccountCloseProposal with
    account : AssetHoldingAccount
  where
    signatory account.assetType.issuer, account.owner

    -- 클라이언트 애플리케이션은 이 선택권(choice)을 행사(exercised)할 때 AssetHoldingAccount에 해당하는 모든 에셋 컨트랙트를 보관해야 합니다.
    choice AssetHoldingAccountCloseProposal_Accept : () 
      with
        assetCids : [ContractId Asset]
      controller account.assetType.issuer
      do
        -- lookupByKey: 주어진 키를 사용하여 AssetHoldingAccount 계약을 찾습니다.
        accountCid <- lookupByKey @AssetHoldingAccount (account.assetType, account.owner)
        -- whenSome: 계약이 존재하는 경우 해당 계약의 ContractId를 사용하여 내부 블록의 코드를 실행합니다.
        whenSome accountCid do
          \accCid -> do
            -- forA_: 제공된 모든 에셋 ContractId에 대해 반복하며, 각 에셋의 유형과 소유자가 계정과 일치하는지 확인하고, 에셋을 아카이브합니다.
            forA_ assetCids \assetCid -> do
              asset <- fetch assetCid
              assertMsg "Asset type mismatch between asset and account" $
                asset.assetType == account.assetType
              assertMsg "Owner mismatch between asset and account" $
                asset.owner == account.owner
              archive assetCid
            archive accCid
        return ()

    choice AssetHoldingAccountCloseProposal_Reject : ()
      controller account.assetType.issuer 
      do
        return ()
-- Trade(거래) 템플릿은 제안자(proposer)와 수락자(receiver) 두 당사자(parties) 간의 두 자산 스왑 제안을 나타냅니다.
template Trade
  with
    proposer : Party
    receiver : Party
    offeredAssetCid : ContractId AssetInSwap
    requestedAssetTxPreApprovalCid : ContractId TransferPreApproval
  where
    signatory proposer
    observer receiver

    -- 거래 제안자가 취소
    choice Trade_Cancel : ()
      controller proposer
      do
        exercise offeredAssetCid Cancel_Swap
        return ()

    -- 거래 수신자가 거절
    choice Trade_Reject : ()
      controller receiver
      do
        exercise offeredAssetCid Reject_Swap
        return ()
    -- 거래 대상 자산
    choice Trade_Settle : (ContractId Asset, ContractId Asset)
      with
        requestedAssetCids: [ContractId Asset]

      controller receiver
      do
        -- 수취인(receiver)은 제안자(proposer)가 제안한 자산을 제안자에서 수취인으로 이전하는 것을 사전(pre-approves) 승인합니다.
        offeredAsset <- fetch offeredAssetCid
        offeredAssetTxPreApprovalCid <- exerciseByKey @AssetHoldingAccount 
          (offeredAsset.asset.assetType, receiver) Preapprove_Transfer_In with
            asset = offeredAsset.asset
        -- 수신자는 제안자가 요청한 자산을 준비합니다.
        requestedAsset <- fetch requestedAssetTxPreApprovalCid
        assertMsg "Non fungible assets must be traded one at a time" $
          requestedAsset.asset.assetType.fungible || L.length requestedAssetCids==1
        -- [2023-08-10 12:39:14] 자산 보유여부 체크용인듯
        (receiverSendingAssetHoldingAccountCid, _) <- fetchByKey @AssetHoldingAccount (requestedAsset.asset.assetType, receiver)
        --totRequestedAssetAmount <- validateTxInputs requestedAssetCids receiverSendingAssetHoldingAccountCid requestedAsset.asset.amount
        preparedRequestedAssetCids <- exerciseByKey @AssetHoldingAccount 
          (requestedAsset.asset.assetType, receiver) Merge_Split with
            assetCids = requestedAssetCids
            outputAmounts = [requestedAsset.asset.amount]
        -- 제안자(proposer)에서 수신자(receiver)로 제공 자산 전송
        newReceiverAsset <- exercise offeredAssetTxPreApprovalCid 
          TransferPreApproval_TransferAssetInSwap 
            with assetInSwapCid = offeredAssetCid
        -- 수신자(receiver)에서 제안자(proposer)에게 요청된 자산 전송
        newProposerAsset <- exercise requestedAssetTxPreApprovalCid 
          TransferPreApproval_TransferAsset 
            with txAssetCid = last preparedRequestedAssetCids
        return (newProposerAsset, newReceiverAsset)

-- TransferPreApproval 템플릿은 이전 발신자(originator)에게 자산 소유자를 이전 발신자 당사자에서 이전 수신자(recipient) 당사자로 변경할 수 있는 권한을 부여합니다.
-- TransferPreApproal template gives the transfer originator the authority to change the asset owner
-- from the transfer originator party to the transfer recipient party
template TransferPreApproval
  with
    asset : Asset
    newOwner : Party
  where
    signatory asset.assetType.issuer
    observer newOwner, asset.owner

    choice TransferPreApproval_Cancel : ()
      controller newOwner
      do
        return ()

    choice TransferPreApproval_Reject : ()
      controller asset.owner
      do
        return ()

    choice TransferPreApproval_TransferAsset : ContractId Asset
      with
        txAssetCid : ContractId Asset
      controller asset.owner, newOwner
      do
        txAsset <- fetch txAssetCid
        assertMsg "Transfer pre-approval asset and transfer asset do not match" $
          asset == txAsset with observers = asset.observers
        archive txAssetCid
        create asset with
          owner = newOwner
          observers = Set.empty

    choice TransferPreApproval_TransferAssetInSwap : ContractId Asset
      with
        assetInSwapCid : ContractId AssetInSwap
      controller asset.owner, newOwner
      do
        assetInSwap <- fetch assetInSwapCid
        assertMsg "Transfer pre-approval asset and transfer asset do not match" $
          asset == assetInSwap.asset with observers = asset.observers
        archive assetInSwapCid
        create asset with
          owner = newOwner
          observers = Set.empty

-- AssetInSwap 템플릿은 스왑을 위해 예약된 자산을 나타냅니다.
-- 거래 제안(trade proposal)이 생성되면 스왑 자금의 원천인 자산(which is the source) 계약이 보관되(archived)므로 다른 스왑을 생성하는 데 사용할 수 없습니다.

-- AssetInSwap(에셋인스왑) 계약은 발행자의 권한이 필요하기 때문에 자산 소유자가 "create" 명령(command)을 사용하여 생성할 수 없습니다. 
-- 자산 발행자와 자산 소유자 모두의 권한을 제공하는 AssetHoldingAccount(자산 보유 계정) 템플릿에서 Create_Trade를 선택(choice)해야만 AssetInSwap(자산인스왑)을 생성할 수 있습니다.

-- 이 템플릿은 거래 제안자(trade proposer)에게 스왑을 취소(cancel)할 수 있는 선택권(choice)을 제공합니다.
-- 또한 수신자(receiver)에게도 거래를 수락(accept)하거나 거부(reject)할 수 있는 선택(choice)권을 제공합니다.
template AssetInSwap
  with
    -- 교환할 자산
    asset : Asset
    -- 스왑 제안을 받은 수신자
    receiver : Party
  where
    signatory (signatory asset)
    observer receiver
    ensure (if asset.assetType.fungible then asset.amount>0.0 else (asset.amount==1.0))

    -- [2023-08-10 12:59:00]
    -- do create asset 가 왜 거절또는 취소일까?
    choice Cancel_Swap : ContractId Asset
      controller asset.owner 
      do
        create asset

    choice Reject_Swap : ContractId Asset
      controller receiver
      do
        create asset
        
-- 사용자가 처음 로그인하면 예시 토큰(Example Token,ET)에 대한 자산보유 계정 제안이 자동으로 생성됩니다. 이 초대는 보류 중인 활동(Pending Activities,UI화면)에서 확인할 수 있습니다.
-- 사용자가 초대를 수락하면 ET에 대한 사용자의 자산보유계정이 생성되며, 이를 통해 사용자는 해당 계정으로 ET 토큰의 에어드랍을 요청할 수 있습니다. (테스트 필요, issur만 가능, ui에서 자동으로 invite사용자 목록이 나오는데 요청건은 확인 필요)
-- 에어드랍 요청은 ET의 발행자 측에서 자동으로 승인합니다. (automatically granted)
-- 이 기능은 AssetHoldingAccount(자산보유계정) 생성 및 에어드랍을 위한 일반적인 제안(Propose)/수락(Accept) 워크플로와는 구분됩니다.
-- AssetHoldingAccountProposal(자산보유계정 제안)을 생성하고 ET에 대한 에어드랍 요청을 수락하는 자동화는 트리거(using Triggers)와
-- 이 특정 목적을 위해 설계된 두 가지 템플릿(AssetHoldingAccountRequest(자산보유계정 요청) 및 AirdropRequest(에어드랍 요청))을 사용하여 구현됩니다.
template AssetHoldingAccountRequest with
    recipient: Party
    owner: Party
  where 
    signatory recipient
    observer owner
    choice AssetHoldingAccountRequest_Accept: ContractId AssetHoldingAccountProposal
      with assetHoldingAccountCid: ContractId AssetHoldingAccount
      controller owner
      do
         exercise assetHoldingAccountCid Invite_New_Asset_Holder with 
          recipient = recipient

template AirdropRequest with
    amount: Decimal
    requester: Party
    assetHoldingAccountIssuer: Party
    assetHoldingAccountCid: ContractId AssetHoldingAccount
  where
    signatory requester
    observer assetHoldingAccountIssuer
    choice AirdropRequest_Accept: ContractId Asset    
      controller assetHoldingAccountIssuer
      do
        exercise assetHoldingAccountCid Airdrop with
          amount = amount
